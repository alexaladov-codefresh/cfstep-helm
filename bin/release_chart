#!/bin/sh
set -e

msg() { echo -e "INF---> $1"; }
err() { echo -e "ERR---> $1" ; exit 1; }

# process repo contexts
processRepoContexts() {
	tempRepoName="repo"
	local vars=$(env | awk -F '=' '{print $1}' | grep -iE "^CF_CTX_[^_].+_URL")

	for var in $vars
	do
		local varValue=$(eval "echo \$$var")
		repoName=$(echo $var | sed -rn 's/^CF_CTX_([^_].+)_URL.*/\1/p')
		# Handle basic auth
		if [ ! -z "${HELMREPO_USERNAME}" ] ; then
			msg "Adding basic auth to REPO URL"
			varValue=$(echo $varValue | sed -rn 's/(https?:\/\/)(.*)/\1'"${HELMREPO_USERNAME}"':'"${HELMREPO_PASSWORD}"'@\2/p')
		fi

		export CHART_REPO_URL=$varValue/ #workaround a bug in Helm where url that doesn't end with / breaks --repo flags
		msg "CHART_REPO_URL set to $CHART_REPO_URL"

		msg "adding repo : $CHART_REPO_URL"
		if [ -z "$DRY_RUN" ]; then
		    helm repo add $tempRepoName $CHART_REPO_URL
		else
		    echo helm repo add $tempRepoName $CHART_REPO_URL
		fi
	done
}

# process custom variables
processCustomVals() {
	local resultedArgs=""

	local vars=$(env | awk -F '=' '{print $1}' | grep -i -e "^customFile_" -e "^valuesFile_")
	for var in $vars
	do
		local varValue=$(eval "echo \$$var")
		resultedArgs="$resultedArgs --values $varValue"
	done

	local vars=$(env | awk -F '=' '{print $1}' | grep -i -e "^custom_" -e "^value_")
	for var in $vars
	do
		local varName=$(echo $var | sed 's/^custom_\|^value_//gI' | sed 's/_/./g' | sed 's/\.\./_/g')
		local varValue=$(eval "echo \$$var")
		resultedArgs="$resultedArgs --set $varName=$varValue"
	done

	echo "$resultedArgs"
}

fixGcsContext() {
	msg "Adding Google creds variable"
	echo -E $GOOGLE_APPLICATION_CREDENTIALS_JSON > /tmp/google-creds.json
	export GOOGLE_APPLICATION_CREDENTIALS="/tmp/google-creds.json"
}

fixCfContext() {
    msg "Adding Codefresh token for managed repository"
    export HELM_REPO_ACCESS_TOKEN=$CF_API_KEY
    export HELM_REPO_AUTH_HEADER="x-access-token"
}

# get chart reference (required)
if [ -z "$CHART_REF" ]; then
	if [ -z "$CHART_NAME" ]; then
		err "Please, specify Helm Chart with CHART_REF environment variable this should be a reference to the chart as Helm CLI expects"
	else
		chart="${CHART_NAME}"
	fi
else
	chart="${CHART_REF}"
fi

if [ -z "$ACTION" ]; then
	ACTION='install'
fi

if [ "$ACTION" == 'install' ]; then
	# get release name (required for install)
	if [ -z "$RELEASE_NAME" ]; then
		err "Please, specify Helm Release name with RELEASE_NAME environment variable"
	fi
	release="${RELEASE_NAME}"

	# set kubernetes context (required for install)
	if [ -z "$KUBE_CONTEXT" ]; then
		err "Please, set Kubernetes context. Use name from Codefresh Integrations page."
	else
		msg "Using ${KUBE_CONTEXT} context"
		if [ -z "$DRY_RUN" ]; then
		    kubectl config use-context ${KUBE_CONTEXT}
		else
		    echo kubectl config use-context ${KUBE_CONTEXT}
		fi
	fi
fi

customVals=$(processCustomVals)

if [ ! -z "${GOOGLE_APPLICATION_CREDENTIALS_JSON}" ] ; then
	fixGcsContext
fi
fixCfContext

processRepoContexts


# target namespace
# TODO: leave it to helm to choose deafult ns
# TODO: take from context
if [ ! -z "${NAMESPACE}" ]; then
	namespace="--namespace=${NAMESPACE}"
fi

# TILLER_NAMESPACE is set as env var to helm.
# TODO: take from context

# set chart version flag
if [ ! -z "${CHART_VERSION}" ]; then
    version="--version ${CHART_VERSION}"
fi

if [ "$ACTION" == 'auth' ]; then
    msg "Authentication context has been setup, exiting."
    exit 0
fi

if [ ! -z "${CHART_REPO_URL}" ]; then
    repoUrl="--repo ${CHART_REPO_URL}"
else #if installing from local, "unpacked" chart, then restore dependencies first
    msg "Building dependencies"
    if [ -z "$DRY_RUN" ]; then
        helm dependency build $chart
    else
        echo helm dependency build $chart
    fi
fi

if [ "$ACTION" == 'push' ]; then
	msg "Packaging the chart"
	PACKAGE=$(helm package $chart $version --destination /dev/shm/ | cut -d " " -f 8)

	case $CHART_REPO_URL in
		cm*)
			msg "Pushing to Chart Museum"
			if [ -z "$DRY_RUN" ]; then
				helm push $PACKAGE $tempRepoName && msg "Successfully pushed" || msg "Push failed"
			else
				echo helm push $PACKAGE $tempRepoName
			fi
			;;
		s3*)
			msg "Pushing to S3 bucket"
			if [ -z "$DRY_RUN" ]; then
				helm s3 push $PACKAGE $tempRepoName && msg "Successfully pushed" || msg "Push failed"
			else
				echo helm s3 push $PACKAGE $tempRepoName
			fi
			;;
		gs*)
			msg "Pushing to GCS bucket"
			if [ -z "$DRY_RUN" ]; then
				helm gcs push $PACKAGE $tempRepoName && msg "Successfully pushed" || msg "Push failed"
			else
				echo helm gcs push $PACKAGE $tempRepoName
			fi
			;;
	esac
else
	msg "Installing chart"
	helmCmd="helm upgrade $release $chart --install $repoUrl $version $customFlags --force --reset-values $namespace $customVals $CMD_PS"
	msg "$helmCmd"
	if [ -z "$DRY_RUN" ]; then
	    eval "$helmCmd"
	fi
fi
